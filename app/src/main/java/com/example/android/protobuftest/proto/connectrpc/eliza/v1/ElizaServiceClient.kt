// Code generated by connect-kotlin. DO NOT EDIT.
//
// Source: proto/eliza.proto
//
package com.example.android.protobuftest.proto.connectrpc.eliza.v1

import com.connectrpc.BidirectionalStreamInterface
import com.connectrpc.Headers
import com.connectrpc.Idempotency.NO_SIDE_EFFECTS
import com.connectrpc.MethodSpec
import com.connectrpc.ProtocolClientInterface
import com.connectrpc.ResponseMessage
import com.connectrpc.ServerOnlyStreamInterface

/**
 *  ElizaService provides a way to talk to Eliza, a port of the DOCTOR script
 *  for Joseph Weizenbaum's original ELIZA program. Created in the mid-1960s at
 *  the MIT Artificial Intelligence Laboratory, ELIZA demonstrates the
 *  superficiality of human-computer communication. DOCTOR simulates a
 *  psychotherapist, and is commonly found as an Easter egg in emacs
 *  distributions.
 */
public class ElizaServiceClient(
  private val client: ProtocolClientInterface,
) : ElizaServiceClientInterface {
  /**
   *  Say is a unary RPC. Eliza responds to the prompt with a single sentence.
   */
  override suspend fun say(request: SayRequest, headers: Headers): ResponseMessage<SayResponse> =
      client.unary(
    request,
    headers,
    MethodSpec(
    "connectrpc.eliza.v1.ElizaService/Say",
      com.example.android.protobuftest.proto.connectrpc.eliza.v1.SayRequest::class,
      com.example.android.protobuftest.proto.connectrpc.eliza.v1.SayResponse::class,
      NO_SIDE_EFFECTS
    ),
  )


  /**
   *  Converse is a bidirectional RPC. The caller may exchange multiple
   *  back-and-forth messages with Eliza over a long-lived connection. Eliza
   *  responds to each ConverseRequest with a ConverseResponse.
   */
  override suspend fun converse(headers: Headers):
      BidirectionalStreamInterface<ConverseRequest, ConverseResponse> = client.stream(
    headers,
    MethodSpec(
    "connectrpc.eliza.v1.ElizaService/Converse",
      com.example.android.protobuftest.proto.connectrpc.eliza.v1.ConverseRequest::class,
      com.example.android.protobuftest.proto.connectrpc.eliza.v1.ConverseResponse::class,
    ),
  )


  /**
   *  Introduce is a server streaming RPC. Given the caller's name, Eliza
   *  returns a stream of sentences to introduce itself.
   */
  override suspend fun introduce(headers: Headers):
      ServerOnlyStreamInterface<IntroduceRequest, IntroduceResponse> = client.serverStream(
    headers,
    MethodSpec(
    "connectrpc.eliza.v1.ElizaService/Introduce",
      com.example.android.protobuftest.proto.connectrpc.eliza.v1.IntroduceRequest::class,
      com.example.android.protobuftest.proto.connectrpc.eliza.v1.IntroduceResponse::class,
    ),
  )

}
